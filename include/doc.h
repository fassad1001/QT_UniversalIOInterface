///------------------------------------------------------------------------------------------------------------------------------------
///                 (LesPlug) Плагин видеокоммутатора KV-1616
///
void commutateKV1616(int input, int output, bool isNetwork); // коммутация
/**
 * @param int input - значение входа коммутатора. У коммутатора 16 входов. Нумерация начинается с 1.
 * @param int output - номер выхода коммутатора. У коммутатора 16 выходов. Нумерация начинается с 1.
 * @param bool isNetwork - признак того, что команда пришла из локальной сети. True - из ЛС, False - не из ЛС.
 */

///------------------------------------------------------------------------------------------------------------------------------------
///             (CreatorPlug) Плагин коммутатора RGBHV 1616-A-Q
///
void commutate1616AQ(int input, int output, bool isNetwork); // коммутация
/**
 * @param int input - значение входа коммутатора. У коммутатора 16 входов. Нумерация начинается с 1.
 * @param int output - номер выхода коммутатора. У коммутатора 16 выходов. Нумерация начинается с 1.
 * @param bool isNetwork - признак того, что команда пришла из локальной сети. True - из ЛС, False - не из ЛС.
 */

///------------------------------------------------------------------------------------------------------------------------------------
///                 (ProfittPlug) Плагин контрольного коммутатора PVS-3202V
///
void commutate3202PVS(int input, int output, bool isNetwork); // коммутация
/**
 * @param int input - значение входа коммутатора. У коммутатора 2 входа. Нумерация начинается с 1.
 * @param int output - номер выхода коммутатора. У коммутатора 32 выхода. Нумерация начинается с 1.
 * @param bool isNetwork - признак того, что команда пришла из локальной сети. True - из ЛС, False - не из ЛС.
 */

///------------------------------------------------------------------------------------------------------------------------------------
///                 (DailyJournalPlug) Плагин журнала
///
void toLog(int typeJournal, int idPlug, int source, QString message, QString result,
           QString command, QString additionalData, int typeMessage, bool post2StatusBar); // слот для приёма сообщений от плагинов
/**
 * @param typeJournal - тип журнала (Журнал функционирования, Журнал настроек)
 * @param idPlug - идентификатор плагина
 * @param source - тип источника (ВС тренажёра, Локальная сеть, Неизвестный).
 * @param message - сообщение от плагина
 *
 * Если сообщение содержит информацию об изменении настроичных параметров, то оно должно иметь вид:
 * Значение|Значение|...
 * В конце сообщения разделитель "|" ставить не нужно
 * Например: 1|2|3
 * Между значениями в сообщении необходимо обязательно ставить разделитель "|".
 * В конце сообщения разделитель ставить не нужно.
 *
 * @param result - результат выполенения команды.
 * @param command - команда, которую отправил плагин. Устройства должны ставить команду, которую они отправляют по COM-порту, а остальные оставляют поле пустым.
 * @param type - тип сообщения
 *
 * Inforamtion:
 * Команды управления ТВА «Агат», соответствующие «Протоколу информационного взаимодействия» и пришедшие из заданного
 * в сетевых настройках адресного пространства, при условии их реализации в ТВА
 *
 * Error:
 * Команды управления ТВА «Агат», соответствующие «Протоколу информационного взаимодействия» и пришедшие из заданного
 * в сетевых настройках адресного пространства, при их неисполнении
 *
 * Deviation:
 * Сообщения об отклонениях от нормального процесса функционирования ТВА «Агат» (достижение значения времени оставшейся
 * наработки лампы проектора значения равном или меньшем нуля, пропадание питающего напряжения 220 В, пропадание связи
 * с включёнными объектами управления, неисполнение полученных команд, запуске режима выключения аппаратуры при пропадании
 * питающего напряжения более 2-х минут);
 *
 * Recovery:
 * Сообщения о восстановлении нормального процесса функционирования ТВА «Агат» (появление питающего напряжения 220 В,
 * восстановление связи с включёнными объектами управления)
 *
 * NoAppropriate:
 * Команды управления ТВА «Агат», не соответствующие «Протоколу информационного взаимодействия» или пришедшие из
 * неоговоренного в сетевых настройках адресного пространства
 *
 * @param additionalData - сюда необходимо написать IP и MAC адрес отправителя команды, если она пришла
 * из неоговоренного в сетевых настройках адресного пространства (IP|MAC)
 * Например: 127.0.0.1|e0:e0:e0:e0:e0:e0
 *
 * @param post2StatusBar - выводить это сообщение в StatusBar главного окна приложения.
 */

///------------------------------------------------------------------------------------------------------------------------------------

///Power panel
/// signal
void sigPowerState( uint plugID, BYTE flag );
/**
* @param flag  0 - состояние не определено; 1 - нет включенных кнопок 2 - есть включенные кнопки
* connect на стороне слота
*/

///
///slot
void OnPowerUp( bool flag );
/**
* @param flag  - false if off and on if true
* @param devID - id плагина
*/
void slotPowerHook( void *, QByteArray, TEXTCode, bool, bool );
/**
* @param void *
* @param QByteArray бинарная команда подачи питания или снятия, зависит от флага bool
* @param TEXTCode
* @param bool снято или подано напряжение
* @param bool IsSingleShot, если 1 то отдельное нажатие, если 0 то скрипт.
*
*/

void signalPowerByDevID( uint nDevID, BYTE bPowerOn );
/**
* @param uint nDevID   - id Устройства на отключение, которое приявязано на кнопку
* @param BYTE bPowerOn - POWER::P_OFF - выключение локально, POWER::P_OFF | POWER::P_NETWORK - выключние по сети,
* POWER::P_ON - включение локально,  POWER::P_ON | POWER::P_NETWORK - включение по сети
*/

///Mnemo
void SigTVA( short, R_BOOL * );
/**
* @param short - из таблицы 4.
*/

///------------------------------------------------------------------------------------------------------------------------------------
///                 (SelectionModePlug) Плагин выбора режима работы (автономный, совместный)
///
void turnOnJointMode(bool isTurnOn); // слот вкл./выкл. совместный режим
/**
* @param isTurnOn - True = вкл., False = выкл.
*/

///------------------------------------------------------------------------------------------------------------------------------------
///                 (BuildPlug) Плагин сборок
///
void changeBuild(int id, int part, bool isTurnOn); // слот
/**
* @param id - номер сборки (нумеруются с 1)
* @param part - часть сборки (1, 2 и т.д.)
* @param isTurnOn - True = вкл., False = выкл.
*/

void editBuild(int id, int option); // слот
/**
* @param id - номер сборки (нумеруются с 1)
* @param option - 0 = начало редактирования, 1 = конец редактирования, 2 = сохранение изменений
*/

void updateProgress(int idPlug, uint value, QString message); // сигнал
/**
* @param idPlug - id плагина
* @param value - значение на которое необходимо увеличить прогресс
* @param message - сообщение при изменении прогресса
*/

void messageBuildPlug(int idPlug, QString message); // сигнал
/**
* @param idPlug - id плагина
* @param message - сообщение для журнала настроек сборок
*/

///------------------------------------------------------------------------------------------------------------------------------------
///                 (TotalShutdownPlug) Плагин выкл. общее
///
void totalShutdown(int part);
/**
* @param part - часть выкл. общего (1, 2 и т.д.)
*/

void updateProgress(int idPlug, uint value, QString message);
/**
* @param idPlug - id плагина
* @param value - значение на которое необходимо увеличить прогресс
* @param message - сообщение при изменении прогресса
*/

///------------------------------------------------------------------------------------------------------------------------------------
///                 (InformationPlug) Плагин для вывода информационных сообщений на форму
///
void emitInformation(int idPlug, bool isTurnOn, QString message);
/**
* @param idPlug - id плагина
* @param isTurnOn - вкл.\откл. режима редактирование для плагинов
* @param message - сообщение, которое будет выведено на форму
*/
void saveClicked(); // сигнал нажатия на кнопку Save
void exitClicked(); // сигнал нажатия на кнопку Exit

///UDP
void sigDevError(int idPlug, bool isTurnOn);
/**
* @param idPlug - id плагина
* @param isTurnOn - вкл.\откл.
*/
